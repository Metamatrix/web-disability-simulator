(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _dom = require('../../utils/dom.js');

var _string = require('../../utils/string.js');

var _math = require('../../utils/math.js');

var _array = require('../../utils/array.js');

var name = 'smallVocabulary',
    supportedlanguages = ['en', 'sv'],
    dictionary = {};

var textNodes = null,
    words = [],
    consonants = [],
    vowels = [];

function processText(text) {

  return text.split(/\s/).map(function (word) {

    if (word.trim().length === 0 || words.includes(word.trim().toLowerCase())) {

      return word;
    }

    return processWord(word);
  }).join(' ');
}

function processWord(word) {

  if (dictionary[word]) {
    return dictionary[word];
  }

  var wordArr = word.split('');

  var counter = (0, _math.random)(0, 1),
      consonant = (0, _math.random)(1, 2) === 1 ? true : false;

  for (var i = 0, l = wordArr.length; i < l; i++) {
    var letter = wordArr[i];

    if ((0, _string.isLetter)(letter)) {
      var newLetter = consonant ? (0, _array.randomArrayValue)(consonants) : (0, _array.randomArrayValue)(vowels);
      wordArr[i] = (0, _string.isUpperCase)(letter) ? newLetter.toUpperCase() : newLetter;
    }

    if (counter === i) {
      counter += (0, _math.random)(1, 2);
      consonant = !consonant;
    }
  }

  var newWord = wordArr.join('');

  dictionary[word] = newWord;

  return newWord;
}

function getDocumentLanguage() {
  var lang = document.querySelector('html').getAttribute('lang');

  if (!lang) {
    return 'en';
  }

  lang = lang.split('-').shift().toLowerCase();

  if (!supportedlanguages.includes(lang)) {
    return 'en';
  }

  return lang;
}

function start() {

  var tagsToIgnore = ['SCRIPT', 'STYLE', 'NOSCRIPT'];
  var lang = getDocumentLanguage();
  var rndKey = new Date().getTime();
  var langFileUrl = chrome.runtime.getURL('/simulations/' + name + '/words.' + lang + '.json?' + rndKey);

  fetch(langFileUrl).then(function (response) {
    return response.json();
  }).then(function (json) {

    words = json.words;
    vowels = json.vowels;
    consonants = json.consonants;

    textNodes = (0, _dom.getTextNodes)(document.querySelector('body'));

    textNodes.forEach(function (el) {

      if (el.textContent.trim().length === 0 || el.parentElement && tagsToIgnore.includes(el.parentElement.tagName)) {
        return;
      }

      el._wdsOriginalText = el.textContent;
      el.textContent = processText(el.textContent);
    });
  });
}

function stop() {

  textNodes.forEach(function (el) {
    el.textContent = el._wdsOriginalText;
  });

  textNodes = null;
}

chrome.runtime.onMessage.addListener(function (request) {
  if (request.action === 'startSimulation' && request.simulation === name) {
    start();
  } else if (request.action === 'stopSimulation' && request.simulation === name) {
    stop();
  }
});


},{"../../utils/array.js":2,"../../utils/dom.js":3,"../../utils/math.js":4,"../../utils/string.js":5}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
function randomArrayValue(array) {
  var length = array.length - 1,
      index = Math.floor(Math.random() * (length + 1));

  return array[index];
}

exports.randomArrayValue = randomArrayValue;


},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addCss = addCss;
exports.addScript = addScript;
exports.addStyle = addStyle;
exports.appendHTML = appendHTML;
exports.getTextNodes = getTextNodes;
exports.removeElement = removeElement;
exports.setStyle = setStyle;
function addCss(href, callback) {
  var l = document.createElement('link');
  l.setAttribute('href', href);
  l.setAttribute('rel', 'stylesheet');
  l.onload = callback;
  document.getElementsByTagName('head')[0].appendChild(l);
  return l;
}

function addScript(src, callback) {
  var s = document.createElement('script');
  s.setAttribute('src', src);
  s.onload = callback;
  document.getElementsByTagName('head')[0].appendChild(s);
  return s;
}

function addStyle(str) {
  var s = document.createElement('style');
  s.innerText = str;
  document.getElementsByTagName('head')[0].appendChild(s);
  return s;
}

function appendHTML(el, html) {
  var tmpEl = document.createElement('div');
  tmpEl.innerHTML = html;

  while (tmpEl.firstChild) {
    el.appendChild(tmpEl.firstChild);
  }
}

function getTextNodes(node) {
  var all = [];
  for (node = node.firstChild; node; node = node.nextSibling) {
    if (node.nodeType == 3) all.push(node);else all = all.concat(getTextNodes(node));
  }
  return all;
}

function removeElement(el) {
  el.parentNode.removeChild(el);
}

function setStyle(element, style) {
  for (var s in style) {
    element.style[s] = style[s];
  }
}


},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.random = random;
exports.pointInRect = pointInRect;
exports.inRange = inRange;
function random(min, max) {
  return Math.floor(min + Math.random() * (max - min + 1));
}

function pointInRect(x, y, rect) {
  return inRange(x, rect.x, rect.x + rect.width) && inRange(y, rect.y, rect.y + rect.height);
}

function inRange(value, min, max) {
  return value >= Math.min(min, max) && value <= Math.max(min, max);
}


},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isLetter = isLetter;
exports.isUpperCase = isUpperCase;
function isLetter(c) {
  return c.toLowerCase() !== c.toUpperCase();
}

function isUpperCase(c) {
  return c === c.toUpperCase();
}


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJidWlsZFxcanNcXGJhYmVsXFxzaW11bGF0aW9uc1xcc21hbGxWb2NhYnVsYXJ5XFxjb250ZW50LmpzIiwiYnVpbGRcXGpzXFxiYWJlbFxcdXRpbHNcXGFycmF5LmpzIiwiYnVpbGRcXGpzXFxiYWJlbFxcdXRpbHNcXGRvbS5qcyIsImJ1aWxkXFxqc1xcYmFiZWxcXHV0aWxzXFxtYXRoLmpzIiwiYnVpbGRcXGpzXFxiYWJlbFxcdXRpbHNcXHN0cmluZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBOztBQUVBLElBQUksT0FBTyxRQUFRLG9CQUFSLENBQVg7O0FBRUEsSUFBSSxVQUFVLFFBQVEsdUJBQVIsQ0FBZDs7QUFFQSxJQUFJLFFBQVEsUUFBUSxxQkFBUixDQUFaOztBQUVBLElBQUksU0FBUyxRQUFRLHNCQUFSLENBQWI7O0FBRUEsSUFBSSxPQUFPLGlCQUFYO0FBQUEsSUFDSSxxQkFBcUIsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUR6QjtBQUFBLElBRUksYUFBYSxFQUZqQjs7QUFJQSxJQUFJLFlBQVksSUFBaEI7QUFBQSxJQUNJLFFBQVEsRUFEWjtBQUFBLElBRUksYUFBYSxFQUZqQjtBQUFBLElBR0ksU0FBUyxFQUhiOztBQUtBLFNBQVMsV0FBVCxDQUFxQixJQUFyQixFQUEyQjs7QUFFekIsU0FBTyxLQUFLLEtBQUwsQ0FBVyxJQUFYLEVBQWlCLEdBQWpCLENBQXFCLFVBQVUsSUFBVixFQUFnQjs7QUFFMUMsUUFBSSxLQUFLLElBQUwsR0FBWSxNQUFaLEtBQXVCLENBQXZCLElBQTRCLE1BQU0sUUFBTixDQUFlLEtBQUssSUFBTCxHQUFZLFdBQVosRUFBZixDQUFoQyxFQUEyRTs7QUFFekUsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsV0FBTyxZQUFZLElBQVosQ0FBUDtBQUNELEdBUk0sRUFRSixJQVJJLENBUUMsR0FSRCxDQUFQO0FBU0Q7O0FBRUQsU0FBUyxX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LENBQXJCLEVBQXdCLENBQXhCLEVBQTJCLElBQTNCLEVBQWlDO0FBQy9CLFNBQU8sUUFBUSxDQUFSLEVBQVcsS0FBSyxDQUFoQixFQUFtQixLQUFLLENBQUwsR0FBUyxLQUFLLEtBQWpDLEtBQTJDLFFBQVEsQ0FBUixFQUFXLEtBQUssQ0FBaEIsRUFBbUIsS0FBSyxDQUFMLEdBQVMsS0FBSyxNQUFqQyxDQUFsRDtBQUNEOztBQUVELFNBQVMsT0FBVCxDQUFpQixLQUFqQixFQUF3QixHQUF4QixFQUE2QixHQUE3QixFQUFrQztBQUNoQyxTQUFPLFNBQVMsS0FBSyxHQUFMLENBQVMsR0FBVCxFQUFjLEdBQWQsQ0FBVCxJQUErQixTQUFTLEtBQUssR0FBTCxDQUFTLEdBQVQsRUFBYyxHQUFkLENBQS9DO0FBQ0Q7QUFDRDs7O0FDbkJBOztBQUVBLE9BQU8sY0FBUCxDQUFzQixPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQyxTQUFPO0FBRG9DLENBQTdDO0FBR0EsUUFBUSxRQUFSLEdBQW1CLFFBQW5CO0FBQ0EsUUFBUSxXQUFSLEdBQXNCLFdBQXRCO0FBQ0EsU0FBUyxRQUFULENBQWtCLENBQWxCLEVBQXFCO0FBQ25CLFNBQU8sRUFBRSxXQUFGLE9BQW9CLEVBQUUsV0FBRixFQUEzQjtBQUNEOztBQUVELFNBQVMsV0FBVCxDQUFxQixDQUFyQixFQUF3QjtBQUN0QixTQUFPLE1BQU0sRUFBRSxXQUFGLEVBQWI7QUFDRDtBQUNEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9kb20gPSByZXF1aXJlKCcuLi8uLi91dGlscy9kb20uanMnKTtcblxudmFyIF9zdHJpbmcgPSByZXF1aXJlKCcuLi8uLi91dGlscy9zdHJpbmcuanMnKTtcblxudmFyIF9tYXRoID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvbWF0aC5qcycpO1xuXG52YXIgX2FycmF5ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYXJyYXkuanMnKTtcblxudmFyIG5hbWUgPSAnc21hbGxWb2NhYnVsYXJ5JyxcbiAgICBzdXBwb3J0ZWRsYW5ndWFnZXMgPSBbJ2VuJywgJ3N2J10sXG4gICAgZGljdGlvbmFyeSA9IHt9O1xuXG52YXIgdGV4dE5vZGVzID0gbnVsbCxcbiAgICB3b3JkcyA9IFtdLFxuICAgIGNvbnNvbmFudHMgPSBbXSxcbiAgICB2b3dlbHMgPSBbXTtcblxuZnVuY3Rpb24gcHJvY2Vzc1RleHQodGV4dCkge1xuXG4gIHJldHVybiB0ZXh0LnNwbGl0KC9cXHMvKS5tYXAoZnVuY3Rpb24gKHdvcmQpIHtcblxuICAgIGlmICh3b3JkLnRyaW0oKS5sZW5ndGggPT09IDAgfHwgd29yZHMuaW5jbHVkZXMod29yZC50cmltKCkudG9Mb3dlckNhc2UoKSkpIHtcblxuICAgICAgcmV0dXJuIHdvcmQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NXb3JkKHdvcmQpO1xuICB9KS5qb2luKCcgJyk7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NXb3JkKHdvcmQpIHtcblxuICBpZiAoZGljdGlvbmFyeVt3b3JkXSkge1xuICAgIHJldHVybiBkaWN0aW9uYXJ5W3dvcmRdO1xuICB9XG5cbiAgdmFyIHdvcmRBcnIgPSB3b3JkLnNwbGl0KCcnKTtcblxuICB2YXIgY291bnRlciA9ICgwLCBfbWF0aC5yYW5kb20pKDAsIDEpLFxuICAgICAgY29uc29uYW50ID0gKDAsIF9tYXRoLnJhbmRvbSkoMSwgMikgPT09IDEgPyB0cnVlIDogZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB3b3JkQXJyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBsZXR0ZXIgPSB3b3JkQXJyW2ldO1xuXG4gICAgaWYgKCgwLCBfc3RyaW5nLmlzTGV0dGVyKShsZXR0ZXIpKSB7XG4gICAgICB2YXIgbmV3TGV0dGVyID0gY29uc29uYW50ID8gKDAsIF9hcnJheS5yYW5kb21BcnJheVZhbHVlKShjb25zb25hbnRzKSA6ICgwLCBfYXJyYXkucmFuZG9tQXJyYXlWYWx1ZSkodm93ZWxzKTtcbiAgICAgIHdvcmRBcnJbaV0gPSAoMCwgX3N0cmluZy5pc1VwcGVyQ2FzZSkobGV0dGVyKSA/IG5ld0xldHRlci50b1VwcGVyQ2FzZSgpIDogbmV3TGV0dGVyO1xuICAgIH1cblxuICAgIGlmIChjb3VudGVyID09PSBpKSB7XG4gICAgICBjb3VudGVyICs9ICgwLCBfbWF0aC5yYW5kb20pKDEsIDIpO1xuICAgICAgY29uc29uYW50ID0gIWNvbnNvbmFudDtcbiAgICB9XG4gIH1cblxuICB2YXIgbmV3V29yZCA9IHdvcmRBcnIuam9pbignJyk7XG5cbiAgZGljdGlvbmFyeVt3b3JkXSA9IG5ld1dvcmQ7XG5cbiAgcmV0dXJuIG5ld1dvcmQ7XG59XG5cbmZ1bmN0aW9uIGdldERvY3VtZW50TGFuZ3VhZ2UoKSB7XG4gIHZhciBsYW5nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpLmdldEF0dHJpYnV0ZSgnbGFuZycpO1xuXG4gIGlmICghbGFuZykge1xuICAgIHJldHVybiAnZW4nO1xuICB9XG5cbiAgbGFuZyA9IGxhbmcuc3BsaXQoJy0nKS5zaGlmdCgpLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKCFzdXBwb3J0ZWRsYW5ndWFnZXMuaW5jbHVkZXMobGFuZykpIHtcbiAgICByZXR1cm4gJ2VuJztcbiAgfVxuXG4gIHJldHVybiBsYW5nO1xufVxuXG5mdW5jdGlvbiBzdGFydCgpIHtcblxuICB2YXIgdGFnc1RvSWdub3JlID0gWydTQ1JJUFQnLCAnU1RZTEUnLCAnTk9TQ1JJUFQnXTtcbiAgdmFyIGxhbmcgPSBnZXREb2N1bWVudExhbmd1YWdlKCk7XG4gIHZhciBybmRLZXkgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgdmFyIGxhbmdGaWxlVXJsID0gY2hyb21lLmV4dGVuc2lvbi5nZXRVUkwoJy9zaW11bGF0aW9ucy8nICsgbmFtZSArICcvd29yZHMuJyArIGxhbmcgKyAnLmpzb24/JyArIHJuZEtleSk7XG5cbiAgZmV0Y2gobGFuZ0ZpbGVVcmwpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgfSkudGhlbihmdW5jdGlvbiAoanNvbikge1xuXG4gICAgd29yZHMgPSBqc29uLndvcmRzO1xuICAgIHZvd2VscyA9IGpzb24udm93ZWxzO1xuICAgIGNvbnNvbmFudHMgPSBqc29uLmNvbnNvbmFudHM7XG5cbiAgICB0ZXh0Tm9kZXMgPSAoMCwgX2RvbS5nZXRUZXh0Tm9kZXMpKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKSk7XG5cbiAgICB0ZXh0Tm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcblxuICAgICAgaWYgKGVsLnRleHRDb250ZW50LnRyaW0oKS5sZW5ndGggPT09IDAgfHwgZWwucGFyZW50RWxlbWVudCAmJiB0YWdzVG9JZ25vcmUuaW5jbHVkZXMoZWwucGFyZW50RWxlbWVudC50YWdOYW1lKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGVsLl93ZHNPcmlnaW5hbFRleHQgPSBlbC50ZXh0Q29udGVudDtcbiAgICAgIGVsLnRleHRDb250ZW50ID0gcHJvY2Vzc1RleHQoZWwudGV4dENvbnRlbnQpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RvcCgpIHtcblxuICB0ZXh0Tm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICBlbC50ZXh0Q29udGVudCA9IGVsLl93ZHNPcmlnaW5hbFRleHQ7XG4gIH0pO1xuXG4gIHRleHROb2RlcyA9IG51bGw7XG59XG5cbmNocm9tZS5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcihmdW5jdGlvbiAocmVxdWVzdCkge1xuICBpZiAocmVxdWVzdC5hY3Rpb24gPT09ICdzdGFydFNpbXVsYXRpb24nICYmIHJlcXVlc3Quc2ltdWxhdGlvbiA9PT0gbmFtZSkge1xuICAgIHN0YXJ0KCk7XG4gIH0gZWxzZSBpZiAocmVxdWVzdC5hY3Rpb24gPT09ICdzdG9wU2ltdWxhdGlvbicgJiYgcmVxdWVzdC5zaW11bGF0aW9uID09PSBuYW1lKSB7XG4gICAgc3RvcCgpO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRlbnQuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmZ1bmN0aW9uIHJhbmRvbUFycmF5VmFsdWUoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCAtIDEsXG4gICAgICBpbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChsZW5ndGggKyAxKSk7XG5cbiAgcmV0dXJuIGFycmF5W2luZGV4XTtcbn1cblxuZXhwb3J0cy5yYW5kb21BcnJheVZhbHVlID0gcmFuZG9tQXJyYXlWYWx1ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycmF5LmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hZGRDc3MgPSBhZGRDc3M7XG5leHBvcnRzLmFkZFNjcmlwdCA9IGFkZFNjcmlwdDtcbmV4cG9ydHMuYWRkU3R5bGUgPSBhZGRTdHlsZTtcbmV4cG9ydHMuYXBwZW5kSFRNTCA9IGFwcGVuZEhUTUw7XG5leHBvcnRzLmdldFRleHROb2RlcyA9IGdldFRleHROb2RlcztcbmV4cG9ydHMucmVtb3ZlRWxlbWVudCA9IHJlbW92ZUVsZW1lbnQ7XG5leHBvcnRzLnNldFN0eWxlID0gc2V0U3R5bGU7XG5mdW5jdGlvbiBhZGRDc3MoaHJlZiwgY2FsbGJhY2spIHtcbiAgdmFyIGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gIGwuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gIGwuc2V0QXR0cmlidXRlKCdyZWwnLCAnc3R5bGVzaGVldCcpO1xuICBsLm9ubG9hZCA9IGNhbGxiYWNrO1xuICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKGwpO1xuICByZXR1cm4gbDtcbn1cblxuZnVuY3Rpb24gYWRkU2NyaXB0KHNyYywgY2FsbGJhY2spIHtcbiAgdmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgcy5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNyYyk7XG4gIHMub25sb2FkID0gY2FsbGJhY2s7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQocyk7XG4gIHJldHVybiBzO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZShzdHIpIHtcbiAgdmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzLmlubmVyVGV4dCA9IHN0cjtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChzKTtcbiAgcmV0dXJuIHM7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZEhUTUwoZWwsIGh0bWwpIHtcbiAgdmFyIHRtcEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRtcEVsLmlubmVySFRNTCA9IGh0bWw7XG5cbiAgd2hpbGUgKHRtcEVsLmZpcnN0Q2hpbGQpIHtcbiAgICBlbC5hcHBlbmRDaGlsZCh0bXBFbC5maXJzdENoaWxkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUZXh0Tm9kZXMobm9kZSkge1xuICB2YXIgYWxsID0gW107XG4gIGZvciAobm9kZSA9IG5vZGUuZmlyc3RDaGlsZDsgbm9kZTsgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmcpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAzKSBhbGwucHVzaChub2RlKTtlbHNlIGFsbCA9IGFsbC5jb25jYXQoZ2V0VGV4dE5vZGVzKG5vZGUpKTtcbiAgfVxuICByZXR1cm4gYWxsO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFbGVtZW50KGVsKSB7XG4gIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZShlbGVtZW50LCBzdHlsZSkge1xuICBmb3IgKHZhciBzIGluIHN0eWxlKSB7XG4gICAgZWxlbWVudC5zdHlsZVtzXSA9IHN0eWxlW3NdO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb20uanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucmFuZG9tID0gcmFuZG9tO1xuZXhwb3J0cy5wb2ludEluUmVjdCA9IHBvaW50SW5SZWN0O1xuZXhwb3J0cy5pblJhbmdlID0gaW5SYW5nZTtcbmZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihtaW4gKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRJblJlY3QoeCwgeSwgcmVjdCkge1xuICByZXR1cm4gaW5SYW5nZSh4LCByZWN0LngsIHJlY3QueCArIHJlY3Qud2lkdGgpICYmIGluUmFuZ2UoeSwgcmVjdC55LCByZWN0LnkgKyByZWN0LmhlaWdodCk7XG59XG5cbmZ1bmN0aW9uIGluUmFuZ2UodmFsdWUsIG1pbiwgbWF4KSB7XG4gIHJldHVybiB2YWx1ZSA+PSBNYXRoLm1pbihtaW4sIG1heCkgJiYgdmFsdWUgPD0gTWF0aC5tYXgobWluLCBtYXgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0aC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pc0xldHRlciA9IGlzTGV0dGVyO1xuZXhwb3J0cy5pc1VwcGVyQ2FzZSA9IGlzVXBwZXJDYXNlO1xuZnVuY3Rpb24gaXNMZXR0ZXIoYykge1xuICByZXR1cm4gYy50b0xvd2VyQ2FzZSgpICE9PSBjLnRvVXBwZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIGlzVXBwZXJDYXNlKGMpIHtcbiAgcmV0dXJuIGMgPT09IGMudG9VcHBlckNhc2UoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZy5qcy5tYXBcbiJdfQ==
